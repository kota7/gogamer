// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// get_branchpath
std::vector<int> get_branchpath(std::vector<int> parent, int goal, bool onebased);
RcppExport SEXP gogamer_get_branchpath(SEXP parentSEXP, SEXP goalSEXP, SEXP onebasedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<int> >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< int >::type goal(goalSEXP);
    Rcpp::traits::input_parameter< bool >::type onebased(onebasedSEXP);
    __result = Rcpp::wrap(get_branchpath(parent, goal, onebased));
    return __result;
END_RCPP
}
// char_to_coord
std::vector<int> char_to_coord(std::vector<std::string> charvec);
RcppExport SEXP gogamer_char_to_coord(SEXP charvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type charvec(charvecSEXP);
    __result = Rcpp::wrap(char_to_coord(charvec));
    return __result;
END_RCPP
}
// expand_rectangle
Rcpp::DataFrame expand_rectangle(std::vector<std::string> text);
RcppExport SEXP gogamer_expand_rectangle(SEXP textSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type text(textSEXP);
    __result = Rcpp::wrap(expand_rectangle(text));
    return __result;
END_RCPP
}
// children_to_parentC
std::vector<int> children_to_parentC(std::vector< std::vector<int> > children);
RcppExport SEXP gogamer_children_to_parentC(SEXP childrenSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector< std::vector<int> > >::type children(childrenSEXP);
    __result = Rcpp::wrap(children_to_parentC(children));
    return __result;
END_RCPP
}
// parent_to_childrenC
std::vector< std::vector<int> > parent_to_childrenC(std::vector<int> parent);
RcppExport SEXP gogamer_parent_to_childrenC(SEXP parentSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<int> >::type parent(parentSEXP);
    __result = Rcpp::wrap(parent_to_childrenC(parent));
    return __result;
END_RCPP
}
// gogame_test
void gogame_test(int m);
RcppExport SEXP gogamer_gogame_test(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    gogame_test(m);
    return R_NilValue;
END_RCPP
}
// get_movenumber
std::vector<int> get_movenumber(std::vector<bool> hasmove, std::vector< std::vector<unsigned int> > children, bool onebased);
RcppExport SEXP gogamer_get_movenumber(SEXP hasmoveSEXP, SEXP childrenSEXP, SEXP onebasedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<bool> >::type hasmove(hasmoveSEXP);
    Rcpp::traits::input_parameter< std::vector< std::vector<unsigned int> > >::type children(childrenSEXP);
    Rcpp::traits::input_parameter< bool >::type onebased(onebasedSEXP);
    __result = Rcpp::wrap(get_movenumber(hasmove, children, onebased));
    return __result;
END_RCPP
}
// prune_sgf
std::string prune_sgf(std::string sgf, bool keepfirst);
RcppExport SEXP gogamer_prune_sgf(SEXP sgfSEXP, SEXP keepfirstSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type sgf(sgfSEXP);
    Rcpp::traits::input_parameter< bool >::type keepfirst(keepfirstSEXP);
    __result = Rcpp::wrap(prune_sgf(sgf, keepfirst));
    return __result;
END_RCPP
}
// sgftree_test
void sgftree_test(std::string sgf);
RcppExport SEXP gogamer_sgftree_test(SEXP sgfSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type sgf(sgfSEXP);
    sgftree_test(sgf);
    return R_NilValue;
END_RCPP
}
// make_sgftree
Rcpp::List make_sgftree(std::string sgf, bool bynode);
RcppExport SEXP gogamer_make_sgftree(SEXP sgfSEXP, SEXP bynodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type sgf(sgfSEXP);
    Rcpp::traits::input_parameter< bool >::type bynode(bynodeSEXP);
    __result = Rcpp::wrap(make_sgftree(sgf, bynode));
    return __result;
END_RCPP
}
// get_transitions
Rcpp::DataFrame get_transitions(unsigned int boardsize, std::vector<bool> ismove_vec, std::vector<unsigned int> x_vec, std::vector<unsigned int> y_vec, std::vector<unsigned int> color_vec, int nodeid);
RcppExport SEXP gogamer_get_transitions(SEXP boardsizeSEXP, SEXP ismove_vecSEXP, SEXP x_vecSEXP, SEXP y_vecSEXP, SEXP color_vecSEXP, SEXP nodeidSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned int >::type boardsize(boardsizeSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type ismove_vec(ismove_vecSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type x_vec(x_vecSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type y_vec(y_vecSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type color_vec(color_vecSEXP);
    Rcpp::traits::input_parameter< int >::type nodeid(nodeidSEXP);
    __result = Rcpp::wrap(get_transitions(boardsize, ismove_vec, x_vec, y_vec, color_vec, nodeid));
    return __result;
END_RCPP
}
// get_transitiontree
Rcpp::DataFrame get_transitiontree(unsigned int boardsize, std::vector<bool> ismove_vec, std::vector<unsigned int> x_vec, std::vector<unsigned int> y_vec, std::vector<unsigned int> color_vec, std::vector<int> nodeid_vec, std::vector< std::vector<unsigned int> > children, bool onebased);
RcppExport SEXP gogamer_get_transitiontree(SEXP boardsizeSEXP, SEXP ismove_vecSEXP, SEXP x_vecSEXP, SEXP y_vecSEXP, SEXP color_vecSEXP, SEXP nodeid_vecSEXP, SEXP childrenSEXP, SEXP onebasedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned int >::type boardsize(boardsizeSEXP);
    Rcpp::traits::input_parameter< std::vector<bool> >::type ismove_vec(ismove_vecSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type x_vec(x_vecSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type y_vec(y_vecSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int> >::type color_vec(color_vecSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type nodeid_vec(nodeid_vecSEXP);
    Rcpp::traits::input_parameter< std::vector< std::vector<unsigned int> > >::type children(childrenSEXP);
    Rcpp::traits::input_parameter< bool >::type onebased(onebasedSEXP);
    __result = Rcpp::wrap(get_transitiontree(boardsize, ismove_vec, x_vec, y_vec, color_vec, nodeid_vec, children, onebased));
    return __result;
END_RCPP
}
// tree_compressor
Rcpp::List tree_compressor(std::vector< std::vector<unsigned int> > children, bool onebased);
RcppExport SEXP gogamer_tree_compressor(SEXP childrenSEXP, SEXP onebasedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector< std::vector<unsigned int> > >::type children(childrenSEXP);
    Rcpp::traits::input_parameter< bool >::type onebased(onebasedSEXP);
    __result = Rcpp::wrap(tree_compressor(children, onebased));
    return __result;
END_RCPP
}
// validate_children
bool validate_children(std::vector< std::vector<int> > children);
RcppExport SEXP gogamer_validate_children(SEXP childrenSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector< std::vector<int> > >::type children(childrenSEXP);
    __result = Rcpp::wrap(validate_children(children));
    return __result;
END_RCPP
}
// validate_parent
bool validate_parent(std::vector<int> parent);
RcppExport SEXP gogamer_validate_parent(SEXP parentSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<int> >::type parent(parentSEXP);
    __result = Rcpp::wrap(validate_parent(parent));
    return __result;
END_RCPP
}
